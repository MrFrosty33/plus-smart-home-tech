services:
  kafka:
    image: confluentinc/confluent-local:7.4.3
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092" # for client connections
      - "9101:9101" # JMX
    restart: unless-stopped
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      CLUSTER_ID: 'K0EA9p0yEe6MkAAAAkKsEg'

  kafka-init-topics:
    image: confluentinc/confluent-local:7.4.3
    container_name: kafka-init-topics
    depends_on:
      - kafka

    # вручную назначаются топики, не забывать про это
    command: "bash -c \
                'kafka-topics --create --topic telemetry.sensors.v1 \
                             --partitions 1 --replication-factor 1 --if-not-exists \
                             --bootstrap-server kafka:29092 && \
                kafka-topics --create --topic telemetry.snapshots.v1 \
                             --partitions 1 --replication-factor 1 --if-not-exists \
                             --bootstrap-server kafka:29092 && \
                kafka-topics --create --topic telemetry.hubs.v1 \
                             --partitions 1 --replication-factor 1 --if-not-exists \
                             --bootstrap-server kafka:29092'"
    init: true

  postgres-db:
    image: postgres:18.0
    environment:
      POSTGRES_DB: plus-smart-home-tech
      POSTGRES_USER: frosty
      POSTGRES_PASSWORD: ytsorf
    ports:
      - "6543:5432"
    volumes:
      - ./db-scripts:/docker-entrypoint-initdb.d

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    depends_on:
      - kafka

  collector:
    build:
      context: .
      dockerfile: telemetry/collector/Dockerfile
    depends_on: [ kafka ]
    ports:
      - "8080:8080"
    volumes:
      - ./config/application-general.yml:/config/application-general.yml:ro
    environment:
      SPRING_CONFIG_IMPORT: optional:file:/config/application-general.yml

  aggregator:
    build:
      context: .
      dockerfile: telemetry/aggregator/Dockerfile
    depends_on: [ kafka ]
    volumes:
      - ./config/application-general.yml:/config/application-general.yml:ro
    environment:
      SPRING_CONFIG_IMPORT: optional:file:/config/application-general.yml

  analyzer:
    build:
      context: .
      dockerfile: telemetry/analyzer/Dockerfile
    volumes:
      - ./config/application-general.yml:/config/application-general.yml:ro
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/telemetry
      SPRING_DATASOURCE_USERNAME: frosty
      SPRING_DATASOURCE_PASSWORD: ytsorf
      SPRING_CONFIG_IMPORT: optional:file:/config/application-general.yml
    depends_on: [ kafka, postgres-db ]