@namespace("ru.yandex.practicum.kafka.telemetry.event")
@doc("События датчиков.")
protocol SensorEventSchema {

	@doc(
			"Типы событий датчиков. Определяет различные типы событий, которые могут быть связаны с датчиками."
			)
	enum SensorEventType {
		MOTION_SENSOR_EVENT,
		TEMPERATURE_SENSOR_EVENT,
		LIGHT_SENSOR_EVENT,
		CLIMATE_SENSOR_EVENT,
		SWITCH_SENSOR_EVENT
	}

	@doc("Данные события, связанного с одним из датчиков.")
	record SensorEvent {
		@doc("Идентификатор события датчика.")
		string id;

		string hubId;

		@doc("Временная метка события. По умолчанию устанавливается текущее время.")
		timestamp_ms timestamp;

		union{
			ClimateSensorEvent,
			LightSensorEvent,
			MotionSensorEvent,
			SwitchSensorEvent,
			TemperatureSensorEvent
		}
		@doc("Данные события одной из перечисленных записей.")
		payload;
	}

	@doc("Событие климатического датчика, содержащее информацию о температуре, влажности и уровне CO2.")
	record ClimateSensorEvent {
		@doc("Идентификатор события датчика.")
		string id;

		@doc("Идентификатор хаба, связанного с событием.")
		string hubId;

		@doc("Временная метка события. По умолчанию устанавливается текущее время.")
		timestamp_ms timestamp;

		@doc("Уровень температуры по шкале Цельсия.")
		int temperatureC;

		@doc("Влажность.")
		int humidity;

		@doc("Уровень CO2.")
		int co2level;

		SensorEventType type;
	}

	@doc("Событие датчика освещенности, включающее информацию о качестве сигнала и уровне освещения.")
	record LightSensorEvent {
		@doc("Идентификатор события датчика.")
		string id;

		@doc("Идентификатор хаба, связанного с событием.")
		string hubId;

		@doc("Временная метка события. По умолчанию устанавливается текущее время.")
		timestamp_ms timestamp;

		@doc("Качество связи.")
		int linkQuality;

		@doc("Уровень освещенности.")
		int luminosity;

		SensorEventType type;
	}

	@doc("Событие датчика движения.")
	record MotionSensorEvent {
		@doc("Идентификатор события датчика.")
		string id;

		@doc("Идентификатор хаба, связанного с событием.")
		string hubId;

		@doc("Временная метка события. По умолчанию устанавливается текущее время.")
		timestamp_ms timestamp;

		@doc("Качество связи.")
		int linkQuality;

		@doc("Наличие/отсутствие движения.")
		boolean motion;

		@doc("Напряжение.")
		int voltage;

		SensorEventType type;
	}

	@doc("Событие датчика переключателя, содержащее информацию о текущем состоянии переключателя.")
	record SwitchSensorEvent {
		@doc("Идентификатор события датчика.")
		string id;

		@doc("Идентификатор хаба, связанного с событием.")
		string hubId;

		@doc("Временная метка события. По умолчанию устанавливается текущее время.")
		timestamp_ms timestamp;

		@doc("Текущее состояние переключателя. true - включен, false - выключен.")
		boolean state;

		SensorEventType type;
	}

	@doc("Событие климатического датчика, содержащее информацию о температуре, влажности и уровне CO2.")
	record TemperatureSensorEvent {
		@doc("Идентификатор события датчика.")
		string id;

		@doc("Идентификатор хаба, связанного с событием.")
		string hubId;

		@doc("Временная метка события. По умолчанию устанавливается текущее время.")
		timestamp_ms timestamp;

		@doc("Уровень температуры по шкале Цельсия.")
		int temperatureC;

		@doc("Уровень температуры по шкале Фаренгейта.")
		int temperatureF;

		SensorEventType type;
	}

}
